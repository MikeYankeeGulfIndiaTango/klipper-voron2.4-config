#fan This file contains common pin mappings for the BigTreeTech Octopus V1.
# To use this config, the firmware should be compiled for the STM32F446 with a "32KiB bootloader"
# Enable "extra low-level configuration options" and select the "12MHz crystal" as clock reference

# after running "make", copy the generated "klipper/out/klipper.bin" file to a
# file named "firmware.bin" on an SD card and then restart the OctoPus with that SD card.

# See docs/Config_Reference.md for a description of parameters.

## Voron Design VORON2 250/300/350mm BigTreeTech OctoPus V1 TMC2209 UART config

## *** THINGS TO CHANGE/CHECK: ***
## MCU paths                            [mcu] section
## Thermistor types                     [extruder] and [heater_bed] sections - See https://www.klipper3d.org/Config_Reference.html#common-thermistors for common thermistor types
## Z Endstop Switch location            [safe_z_home] section
## Homing end position                  [gcode_macro G32] section
## Z Endstop Switch  offset for Z0      [stepper_z] section
## Probe points                         [quad_gantry_level] section
## Min & Max gantry corner postions     [quad_gantry_level] section
## PID tune                             [extruder] and [heater_bed] sections
## Probe pin                            [probe] section
## Fine tune E steps                    [extruder] section

[mcu rpi]
serial: /tmp/klipper_host_mcu


### LDO ADXL
# [adxl345]
# cs_pin: rpi:None

# [resonance_tester]
# accel_chip: adxl345
# probe_points:
#     175, 175, 20  # an example

### CAN_EBB36 ADXL
## ADXL345
[adxl345]
cs_pin: can0:ADXL_CS
spi_software_sclk_pin: can0:ADXL_SCLK
spi_software_mosi_pin: can0:ADXL_MOSI
spi_software_miso_pin: can0:ADXL_MISO
axes_map: x,y,z

[resonance_tester]
accel_chip: adxl345
probe_points:
    175,175,20  # an example for a 350mm printer



[mcu]
##  Obtain definition by "ls -l /dev/serial/by-id/" then unplug to verify
##--------------------------------------------------------------------
#serial: /dev/serial/by-id/{REPLACE WITH YOUR SERIAL}
#serial: /dev/serial/by-id/usb-STMicroelectronics_MARLIN_BIGTREE_OCTOPUS_V1_CDC_in_FS_Mode_2057385B5333-if00
#serial: /dev/serial/by-id/usb-Klipper_stm32f446xx_2A0022000150335331383520-if00
serial: /dev/serial/by-id/usb-Klipper_stm32f446xx_2A0022000150335331383520-if00
restart_method: command
##--------------------------------------------------------------------

### Add support for exclude object (allows you to cancel objects during print)
[exclude_object]


### Custom Includes
### Add toolhead can for ebb36 board
[include toolhead_btt_ebbcan_G0B1_v1.2.cfg]
### Add sensorless X and Y homing (A&B steppers, motor 0 and motor 1)
[include sensorless_homing.cfg]
### Add support for KAMP (Klipper Adaptive Meshing Purging)
[include KAMP_custom.cfg]
### add support for automatic purge and nozzle scrubber
[include PURGE_BUCKET_AND_SCRUBBER/*.cfg]
### add LED effects
[include DIV_MACROS/led_macros.cfg]

### add speed /  acceleration test macro
[include DIV_MACROS/TEST_SPEED.cfg]


### Add interruptable PRINT_START macros
#[include DIV_MACROS/interruptable_macro_prepareforprint.cfg]
[include DIV_MACROS/interruptable_print_start.cfg]

### add test macros
#[include DIV_MACROS/global_variables.cfg]
#[include DIV_MACROS/interruptable_macro.cfg]
#[include DIV_MACROS/interruptable_macro_heatsoak.cfg]
[include DIV_MACROS/gcode_shell_commands.cfg]



[printer]
## Suggested defaults from https://docs.vorondesign.com/build/software/configuration.html
#kinematics: corexy
#max_velocity: 350
#max_accel: 3000
#max_z_velocity: 50
#max_z_accel: 350
#square_corner_velocity: 10.0

# LDO Defaults
#kinematics: corexy
#max_velocity: 300
#max_accel: 3000             #Max 4000
#max_z_velocity: 15          #Max 15 for 12V TMC Drivers, can increase for 24V
#max_z_accel: 350
#square_corner_velocity: 5.0

# Custom printer settings
kinematics: corexy
max_velocity: 500
max_accel: 15000             #Max 4000
#max_z_velocity: 17          #Max 15 for 12V TMC Drivers, can increase for 24V
max_z_velocity: 30          #Max 15 for 12V TMC Drivers, can increase for 24V
max_z_accel: 350
#square_corner_velocity: 5.0
square_corner_velocity: 30.0


#####################################################################
#   X/Y Stepper Settings
#####################################################################

##  B Stepper - Left
##  Connected to MOTOR_0
##  Endstop connected to DIAG_0
[stepper_x]
step_pin: PF13
dir_pin: PF12
enable_pin: !PF14
rotation_distance: 40
microsteps: 32
full_steps_per_rotation:400  #set to 200 for 1.8 degree stepper
#endstop_pin: PG6
endstop_pin: tmc2209_stepper_x:virtual_endstop
position_min: 0
##--------------------------------------------------------------------

##  Uncomment for 350mm build
position_endstop: 350
position_max: 350

##--------------------------------------------------------------------
#homing_speed: 25   #Max 100
#homing_retract_dist: 5
homing_speed: 20   #Max 100
homing_retract_dist: 0
homing_positive_dir: true

##  Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_x]
uart_pin: PC4
interpolate: false
run_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 0
diag_pin: ^PG6
#driver_SGTHRS: 106
driver_SGTHRS: 95

##  A Stepper - Right
##  Connected to MOTOR_1
##  Endstop connected to DIAG_1
[stepper_y]
step_pin: PG0
dir_pin: PG1
enable_pin: !PF15
rotation_distance: 40
microsteps: 32
full_steps_per_rotation:400  #set to 200 for 1.8 degree stepper
#endstop_pin: PG9
endstop_pin: tmc2209_stepper_y:virtual_endstop
position_min: 0
##--------------------------------------------------------------------

##  Uncomment for 350mm build
position_endstop: 350
position_max: 350

##--------------------------------------------------------------------
#homing_speed: 25  #Max 100
#homing_retract_dist: 5
homing_speed: 20  #Max 100
homing_retract_dist: 0
homing_positive_dir: true

##  Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_y]
uart_pin: PD11
interpolate: false
run_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 0
diag_pin: ^PG9
driver_SGTHRS: 95
 
#####################################################################
#   Z Stepper Settings
#####################################################################

## Z0 Stepper - Front Left
##  Connected to MOTOR_2
##  Endstop connected to DIAG_2
[stepper_z]
step_pin: PF11
dir_pin: PG3
enable_pin: !PG5
rotation_distance: 40
gear_ratio: 80:16
microsteps: 32
#endstop_pin: PG10
endstop_pin: probe:z_virtual_endstop
##  Z-position of nozzle (in mm) to z-endstop trigger point relative to print surface (Z0)
##  (+) value = endstop above Z0, (-) value = endstop below
##  Increasing position_endstop brings nozzle closer to the bed
##  After you run Z_ENDSTOP_CALIBRATE, position_endstop will be stored at the very end of your config
#position_endstop: -0.5
##--------------------------------------------------------------------

##  Uncomment below for 350mm build
position_max: 310

##--------------------------------------------------------------------
position_min: -5
homing_speed: 8
second_homing_speed: 3
homing_retract_dist: 3

##  Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_z]
uart_pin: PC6
interpolate: false
run_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 999999

##  Z1 Stepper - Rear Left
##  Connected to MOTOR_3
[stepper_z1]
step_pin: PG4
dir_pin: !PC1
enable_pin: !PA0
rotation_distance: 40
gear_ratio: 80:16
microsteps: 32

##  Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_z1]
uart_pin: PC7
interpolate: false
run_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 999999

##  Z2 Stepper - Rear Right
##  Connected to MOTOR_4
[stepper_z2]
step_pin: PF9
dir_pin: PF10
enable_pin: !PG2
rotation_distance: 40
gear_ratio: 80:16
microsteps: 32

##  Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_z2]
uart_pin: PF2
interpolate: false
run_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 999999

##  Z3 Stepper - Front Right
##  Connected to MOTOR_5
[stepper_z3]
step_pin: PC13
dir_pin: !PF0
enable_pin: !PF1
rotation_distance: 40
gear_ratio: 80:16
microsteps: 32

##  Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_z3]
uart_pin: PE4
interpolate: false
run_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 999999


#####################################################################
#   Extruder
#####################################################################

##  Connected to MOTOR_6
##  Heater - HE0
##  Thermistor - T0
[extruder]
#step_pin: PE2
step_pin: can0:PD0
#dir_pin: !PE3
dir_pin: !can0:PD1
#enable_pin: !PD4
enable_pin: !can0:PD2
##  Update value below when you perform extruder calibration
##  If you ask for 100mm of filament, but in reality it is 98mm:
##  rotation_distance = <previous_rotation_distance> * <actual_extrude_distance> / 100
##  22.6789511 is a good starting point
rotation_distance: 22.9046186117778139935

##  Update Gear Ratio depending on your Extruder Type
##  Use 50:10 for Stealthburner/Clockwork 2
##  Use 50:17 for Afterburner/Clockwork (BMG Gear Ratio)
##  Use 80:20 for M4, M3.1
gear_ratio: 50:10               #BMG Gear Ratio
microsteps: 32
full_steps_per_rotation: 200    #200 for 1.8 degree, 400 for 0.9 degree
nozzle_diameter: 0.400
filament_diameter: 1.75
#heater_pin: PA2
heater_pin: can0:PB13
## Check what thermistor type you have. See https://www.klipper3d.org/Config_Reference.html#common-thermistors for common thermistor types.
## Use "Generic 3950" for NTC 100k 3950 thermistors
#sensor_type: ATC Semitec 104NT-4-R025H42G ## E3D Revo Voron Sensor
sensor_type: PT1000 ## Phaetus Rapido 2 Plus UHF w/PT1000
pullup_resistor: 2200 ## Phaetus Rapido 2 Plus UHF w/PT1000 pullup resistor value
#sensor_pin: PF4
sensor_pin: can0:PA3
min_temp: 10
#max_temp: 295 ## E3D Revo Maximum Temperature
max_temp: 350 ## Rapido 2 Maximum Temperature
max_power: 1.0
min_extrude_temp: 170
### E3D Revo PIDs
#control = pid
#pid_kp = 33.301
#pid_ki = 4.724
#pid_kd = 58.694
### Phaetus Rapido 2 Plus UHF PIDs
#control = pid
#pid_kp = 27.885
#pid_ki = 2.295
#pid_kd = 84.700


##  Try to keep pressure_advance below 1.0
pressure_advance: 0.045
##  Default is 0.040, leave stock
pressure_advance_smooth_time: 0.040

## KAMP (Klipper Adaptive Meshing Purging) requires we override the extrude safety mechanism by increasing this parameter.
#max_extrude_cross_section: 15 ## E3D Revo Voron w 0.4mm nozzle
max_extrude_cross_section: 30 ## Phaetus Rapido 2 UHF with 0.4mm nozzle

##  E0 on MOTOR6
##  Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 extruder]
#uart_pin: PE1
uart_pin: can0:PA15
interpolate: false
run_current: 0.5
sense_resistor: 0.110
stealthchop_threshold: 0




#####################################################################
#   Bed Heater
#####################################################################


##  SSR Pin - HE1
##  Thermistor - TB
[heater_bed]
heater_pin: PA1
##  Validate the following thermistor type to make sure it is correct
##  Keenovo branded bed heaters should use Generic 3950
##  LDO branded bed heaters will have the sensor type labelled on the heater
## Check what thermistor type you have. See https://www.klipper3d.org/Config_Reference.html#common-thermistors for common thermistor types.
## Use "Generic 3950" for Keenovo heaters
#sensor_type: ATC Semitec 104NT-4-R025H42G
sensor_type: Generic 3950
sensor_pin: PF3
##  Adjust Max Power so your heater doesn't warp your bed. Rule of thumb is 0.4 watts / cm^2 .
max_power: 1.0
min_temp: 0
max_temp: 120
control: pid
#pid_kp: 58.437
#pid_ki: 2.347
#pid_kd: 363.769

## result of auto PID tune (without sideplates installed)
pid_Kp=39.290 
pid_Ki=1.230 
pid_Kd=313.826

#####################################################################
#   Probe
#####################################################################


[probe]
#pin: PG15 ##  old Inductive Probe prin ##  This probe is not used for Z height, only Quad Gantry Leveling
pin: can0:PB6 ## Tap probe pin
#x_offset: 0
#y_offset: 25.0
x_offset: 0
y_offset: 0
#z_offset: 0
speed: 10.0
samples: 5
samples_result: median
sample_retract_dist: 3.0
#samples_tolerance: 0.006
samples_tolerance: 0.01
samples_tolerance_retries: 3

activate_gcode:
    {% set PROBE_TEMP = 145 %}
    {% set MAX_TEMP = PROBE_TEMP + 5 %}
    {% set ACTUAL_TEMP = printer.extruder.temperature %}
    {% set TARGET_TEMP = printer.extruder.target %}

    {% if TARGET_TEMP > PROBE_TEMP %}
        { action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }
        M109 S{ PROBE_TEMP }
    {% else %}
        # Temperature target is already low enough, but nozzle may still be too hot.
        {% if ACTUAL_TEMP > MAX_TEMP %}
            { action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }
            TEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }
        {% endif %}
    {% endif %}
    

#####################################################################
#   Fan Control
#####################################################################

##  Print Cooling Fan - FAN0
[fan]
#pin: PA8
pin: can0: PA1
kick_start_time: 0.5
##  Depending on your fan, you may need to increase this value
##  if your fan will not start. Can change cycle_time (increase)
##  if your fan is not able to slow down effectively
off_below: 0.10
# new custom Enable Fan on error state (to make sure it cools the extruder if there's any error)
shutdown_speed: 1


##  Hotend Fan - FAN1
[heater_fan hotend_fan]
#pin: PE5
pin: can0: PA0
max_power: 1.0
kick_start_time: 0.5
heater: extruder
heater_temp: 50.0
##  If you are experiencing back flow, you can reduce fan_speed
#fan_speed: 1.0

##  Controller fan - FAN2
[controller_fan controller_fan]
pin: PD12
kick_start_time: 0.5
heater: heater_bed
fan_speed: 0.5



##  Exhaust fan - FAN3
#[heater_fan exhaust_fan]
#pin: PD13
#max_power: 1.0
#shutdown_speed: 0.0
#kick_start_time: 5.0
#heater: heater_bed
#heater_temp: 60
#fan_speed: 1.0

# [fan_generic pi_fan]
# pin: PD14
# kick_start_time: 0.5

# [gcode_macro PI_AUTO_FAN]
# variable_check_interval: 15
# gcode:
# 	#UPDATE_DELAYED_GCODE ID=PI_AUTO_FAN_LOOP DURATION={ check_interval }
# 	UPDATE_DELAYED_GCODE ID=PI_AUTO_FAN_LOOP DURATION=1 ## start it right away

# [delayed_gcode PI_AUTO_FAN_LOOP]
# gcode:
# 	{% set pi_auto_fan = printer['gcode_macro PI_AUTO_FAN']  %}
# 	{% set pi = printer["temperature_sensor raspberry_pi"] %}
	
# 	{% if pi.temperature >=30 or pi.temperature < 35.0 %}
# 	   SET_FAN_SPEED FAN=pi_fan SPEED=0.5
#    	{% elif pi.temperature >=35 or pi.temperature < 40.0 %}
# 	   SET_FAN_SPEED FAN=pi_fan SPEED=0.55
#   	{% elif pi.temperature >=40 or pi.temperature < 45.0 %}
# 	   SET_FAN_SPEED FAN=pi_fan SPEED=0.85
# 	{% elif pi.temperature >=45 or pi.temperature < 50.0 %}
# 	   SET_FAN_SPEED FAN=pi_fan SPEED=1.0
# 	{% else %}
# 	   SET_FAN_SPEED FAN=pi_fan SPEED=0.3
# 	{% endif %}
# 	UPDATE_DELAYED_GCODE ID=PI_AUTO_FAN_LOOP DURATION={pi_auto_fan.check_interval}

[temperature_fan pi_fan]
## Pi fan - Fan4 on Octopus
pin: PD14 
max_power: 1.0
shutdown_speed: 0.0
control: pid
off_below: 0.15
sensor_type: temperature_host
min_speed: 0
max_speed: 1.0
pid_kp: 1.0
pid_ki: 0.5
pid_kd: 2.0
pid_deriv_time:2.0
min_temp: 0
max_temp: 100
#target_temp: 60
target_temp: 40





## This is a simple include for the Nevermore. To use it with your printer, edit
## the pin definition in line 16 so it matches your printer.
## What you get:
## - a generic fan "Nevermore" which is adjustable in GCODE and in Mainsail/Fluidd
## - Commands in your 12864-controller to turn the fan on/off or adjust in 10%-steps
## - a Macro to turn the fan off some time after the print.
##
## Slicer integration: Add "SET_FAN_SPEED FAN=Nevermore SPEED=1" in your start-macro
## (or less fan depending on your needs, like SPEED=0.8)
## in your end print code, add "UPDATE_DELAYED_GCODE ID=filter_off DURATION=180"
## this keeps your Nevermore running for 180s after the print finishes to clean the chamber a bit more.
[fan_generic Nevermore]
## Nevermore - FAN5 on Octopus
pin: PD13
## Nevermore Menus
[menu __main __control __nevermoreonoff]
type: command
name: Nevermore {'ON' if printer['fan_generic Nevermore'].speed > 0 else 'OFF'}
enable: {'fan_generic Nevermore' in printer}
gcode:
    TOGGLE_NEVERMORE

[menu __main __control __filterspeed]
type: input
enable: {'fan_generic Nevermore' in printer}
name: Filter %: {'%3d' % (menu.input*100)}%
input: {printer["fan_generic Nevermore"].speed}
input_min: 0
input_max: 1
input_step: 0.1
gcode:
    SET_FAN_SPEED FAN=Nevermore SPEED={menu.input}

[gcode_macro FILTER_OFF]
gcode:
    SET_FAN_SPEED FAN=Nevermore SPEED=0

[gcode_macro TOGGLE_NEVERMORE]
gcode:
    {% if printer['fan_generic Nevermore'].speed > 0 %}
      SET_FAN_SPEED FAN=Nevermore SPEED=0
    {% else %}
      SET_FAN_SPEED FAN=Nevermore SPEED=0.8
    {% endif %}

[gcode_macro FILTER_ON]
gcode:
    FILTER_ON_100

[gcode_macro FILTER_ON_40]
gcode:
    SET_FAN_SPEED Fan=Nevermore SPEED=0.4

[gcode_macro FILTER_ON_50]
gcode:
    SET_FAN_SPEED Fan=Nevermore SPEED=0.5

[gcode_macro FILTER_ON_80]
gcode:
    SET_FAN_SPEED Fan=Nevermore SPEED=0.8

[gcode_macro FILTER_ON_100]
gcode:
    SET_FAN_SPEED Fan=Nevermore SPEED=1.0


#####################################################################
#   LED Control
#####################################################################

[output_pin caselight]
## Chamber Lighting - CNC_FAN5
pin: PD15
pwm:true
shutdown_value: 0
value:0.01
cycle_time: 0.001

[neopixel headlight]
## Stealthburner lighting - RGB_LED
#pin: PB0
pin: can0:PD3
#chain_count: 3
#color_order: GRBW
chain_count: 10 ## Rainbow BARF
color_order: GRBW, GRB, GRB, GRB, GRB, GRB, GRB, GRB, GRB, GRBW
initial_RED: 0.0
initial_GREEN: 0.0
initial_BLUE: 0.0
initial_WHITE: 1.0

[neopixel underglow]
## underglow - electronics bay light - RGB_LED
pin: PB0
chain_count: 52
#color_order: GRBW
color_order: GRB
initial_RED: 1.0
initial_GREEN: 0.0
initial_BLUE: 0.0
#initial_WHITE: 1.

#####################################################################
#   Additional Sensors
#####################################################################

### LDO toolhead board chamber thermistor
#[thermistor CMFB103F3950FANT]
#temperature1: 0.0
#resistance1: 32116.0
#temperature2: 40.0
#resistance2: 5309.0
#temperature3: 80.0
#resistance3: 1228.0

## generic 104NT thermistor
[thermistor 104NT-4-R025H42G]
temperature1: 25
resistance1: 100000
temperature2: 160
resistance2: 1074
temperature3: 300
resistance3: 82.78

[duplicate_pin_override]
pins: PF5 ## re-using PF5 for vefach, bed_fan and chamber_temp thermistor

[temperature_sensor chamber_temp]
#Chamber Temperature - T1
#sensor_type: CMFB103F3950FANT
#sensor_pin: PF5
sensor_type: 104NT-4-R025H42G
sensor_pin: PF5
min_temp: 0
max_temp: 100
gcode_id: chamber_th

# [fan_generic bed_fan]
# ## Bed Fans - FAN1 on Octopus
# pin: PE5

# [gcode_macro BED_FAN_ON_LOW]
# gcode:
#     SET_FAN_SPEED Fan=bed_fan SPEED=50
# [gcode_macro BED_FAN_ON_HIGH]
# gcode:
#     SET_FAN_SPEED Fan=bed_fan SPEED=100


[temperature_fan bed_fan]
pin: PE5
max_power: 1.0
shutdown_speed: 0.0
cycle_time: 0.010
hardware_pwm: false
kick_start_time: 0.500
sensor_type: 104NT-4-R025H42G
sensor_pin: PF5
min_temp: 0
max_temp: 100
target_temp: 0
min_speed: 0.0
max_speed: 1.00
control: pid
pid_Kp: -300
pid_Ki: -300
pid_Kd: -100.0
pid_deriv_time: 2.0
gcode_id: bed_fan

[gcode_macro BED_FAN_ON]
gcode:
    {% set S = params.S|default(0)|float %}
    
    {% if S > 0.0 %} # don't use if no chamber temp is set
       ### uncommended temp reduction by 1degC because it was taking too long to reach temperature target
       # {% if S > 1.0 %}
       #    {% set S = S - 1 %} ## subtract 1, so fans actually turn off at desired temp and don't overshoot (limitation with PID hack)
       # {% endif %}
       SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=bed_fan TARGET={S}
    {% endif %}

[gcode_macro BED_FAN_OFF]
gcode:
    #SET_FAN_SPEED Fan=bed_fan SPEED=0
    SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=bed_fan TARGET=0


# [fan_generic vefach]
# ## Vefach - FAN0 on Octopus
# pin: PA8

# [gcode_macro VEFACH_ON_10]
# gcode:
#     SET_FAN_SPEED Fan=vefach SPEED=0.1
# [gcode_macro VEFACH_ON_70]
# gcode:
#     SET_FAN_SPEED Fan=vefach SPEED=0.7
# [gcode_macro VEFACH_ON_80]
# gcode:
#     SET_FAN_SPEED Fan=vefach SPEED=0.8    
# [gcode_macro VEFACH_ON_100]
# gcode:
#     SET_FAN_SPEED Fan=vefach SPEED=1.0
# [gcode_macro VEFACH_ON_LOW]
# gcode:
#     VEFACH_ON_100
# [gcode_macro VEFACH_ON_HIGH]
# gcode:
#     VEFACH_ON_100

# [gcode_macro VEFACH_OFF]
# gcode:
#     SET_FAN_SPEED Fan=vefach SPEED=0

[temperature_fan vefach]
pin: PA8
max_power: 1.0
shutdown_speed: 0.0
cycle_time: 0.010
hardware_pwm: false
kick_start_time: 0.500
sensor_type: 104NT-4-R025H42G
sensor_pin: PF5
min_temp: 0
max_temp: 100
target_temp: 0
min_speed: 0.70
max_speed: 1.00
control: pid
pid_Kp: 40  # 40
pid_Ki: 0.2   # 0.2
pid_Kd: 0.1
pid_deriv_time: 2.0
gcode_id: vefach

[gcode_macro VEFACH_ON]
gcode:
    {% set S = params.S|default(1)|float %}
    SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=vefach TARGET={S}

[gcode_macro VEFACH_OFF]
gcode:
    SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=vefach TARGET=0


[temperature_sensor raspberry_pi]
sensor_type: temperature_host
min_temp: 10
max_temp: 100

[temperature_sensor octopus_pro]
sensor_type: temperature_mcu

### Custom Filament Runout Switch Sensor
## https://docs.vorondesign.com/community/electronics/120decibell/filament_runout_sensor.html
[filament_switch_sensor filament_sensor_bowden]
pause_on_runout: True
runout_gcode:
    #PARK_MACRO
    M117 Out of Filament
    { action_respond_info( "WARNING: OUT OF FILAMENT!!!! replace filament to resume" ) }
    LED_MACROS_CRITICAL_ERROR
    PLAY_SOUND_ERROR
    M600
insert_gcode:
    #M117 Resuming
    #RESUME_MACRO
    M117 Filament Detected, ready to resume
    LED_MACROS_PRINT
event_delay: 3.0
pause_delay: 0.5
#switch_pin: P1.26
switch_pin: PG11

# [filament_motion_sensor filament_sensor_bttsfs]
# detection_length: 10.00 # This can be adjusted to your desired level of sensitivity. 10 is a recomended value to prevent flow dropoff false triggers.
# extruder: extruder
# switch_pin: ^PG15
# #switch_pin: ^PG12
# #switch_pin: ^PG11
# pause_on_runout: True # This can be set to false to debug false positives putting the sensor in "monitor mode". The printer will not pause but it will run the runout_gcode below. 
# event_delay: 3.0
# pause_delay: 0.5
# runout_gcode:
#     #PARK_MACRO
#     M117 Out of Filament
#     { action_respond_info( "WARNING: OUT OF FILAMENT!!!! replace filament to resume" ) }
#     LED_MACROS_CRITICAL_ERROR
#     M600
# insert_gcode:
#     #M117 Resuming
#     #RESUME_MACRO
#     M117 Filament Detected, ready to resume
#     LED_MACROS_PRINT


[delayed_gcode auto_disable_filament_sensors] # This will disable the SFS 1 second after klipper starts
initial_duration: 1
gcode:
    #SET_FILAMENT_SENSOR SENSOR=filament_sensor_bttsfs ENABLE=0
    SET_FILAMENT_SENSOR SENSOR=filament_sensor_bowden ENABLE=0
    

[gcode_macro ENABLE_FILAMENT_SENSORS] # Add this to PRINT_START
description: Enable filament sensors
gcode:
    M117 ENABLING Filament Sensors
    G92 E0
    #SET_FILAMENT_SENSOR SENSOR=filament_sensor_bttsfs ENABLE=1
    SET_FILAMENT_SENSOR SENSOR=filament_sensor_bowden ENABLE=1

[gcode_macro DISABLE_FILAMENT_SENSORS] # Add this to PRINT_END and PRINT_CANCEL
description: Disable filament sensors
gcode:
    M117 DISABLING Filament Sensors
    G92 E0
    #SET_FILAMENT_SENSOR SENSOR=filament_sensor_bttsfs ENABLE=0
    SET_FILAMENT_SENSOR SENSOR=filament_sensor_bowden ENABLE=0


#####################################################################
#   Homing and Gantry Adjustment Routines
#####################################################################

[idle_timeout]
timeout: 1800
gcode:
    {% if "x" in printer.toolhead.homed_axes and "y" in printer.toolhead.homed_axes %}
        G1 F600 X340 Y340
    {% endif %}
    M84
    TURN_OFF_HEATERS
    FILTER_OFF
    VEFACH_OFF
    BED_FAN_OFF
    LED_MACROS_STARTUP

# [safe_z_home]
# ##  XY Location of the Z Endstop Switch
# ##  Update -10,-10 to the XY coordinates of your endstop pin 
# ##  (such as 157,305) after going through Z Endstop Pin
# ##  Location Definition step.
# home_xy_position:233.5,350
# speed:100
# z_hop:10
# z_hop_speed:10

[homing_override]
#set_position_z: 0
axes: xyz
gcode:
  {% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}

  {% if home_all or 'X' in params %}
    _HOME_X
  {% endif %}
  {% if home_all or 'Y' in params %}
    _HOME_Y
  {% endif %}
  {% if home_all or 'Z' in params %}
    BED_MESH_CLEAR ### clear bed mesh since we want to move toolhead. else it complains that we "must home axes first"
    G90 ; Set all axes to absolute
    G0 X175 Y175
    G28 Z
    G1 Z10
  {% endif %}
  G90 ## set position back to absolute, sensorless homeing macros sets G91 position to relative for some reason.
  
  ### raise Z if homing X or Y and Z not homed
  # {% if ( home_all or 'X' in params or 'Y' in params ) and not 'Z' in params %}
  #   G1 Z10 F300
  #   M84 ## disable motors to clear fake "z home" status (because there's no other decent way to just clear Z homed yet)
  #   {% if home_all or 'X' in params %}
  #       _HOME_X
  #   {% endif %}      
  #   {% if home_all or 'Y' in params %}
  #     _HOME_Y
  #   {% endif %}
  # {% endif %}

  # {% if home_all or 'Z' in params %}
  #   ## if X or Y not homed, raise Z and home x and Y
  #   {% if "x" not in printer.toolhead.homed_axes or "y" not in printer.toolhead.homed_axes %}
  #     G1 Z10 F300
  #     M84 ## disable motors to clear fake "z home" status (because there's no other decent way to just clear Z homed yet)
  #     {% if "x" not in printer.toolhead.homed_axes %}
  #        _HOME_X
  #     {% endif %}
  #     {% if "y" not in printer.toolhead.homed_axes %}
  #        _HOME_Y
  #     {% endif %}
  #   {% endif %}
    
  #   BED_MESH_CLEAR ### clear bed mesh since we want to move toolhead. else it complains that we "must home axes first"
  #   G90 ; Set all axes to absolute
  #   G0 X175 Y175
  #   G28 Z
  #   G1 Z10
  # {% endif %}
  # G90 ## set position back to absolute, sensorless homeing macros sets G91 position to relative for some reason.



##  Use QUAD_GANTRY_LEVEL to level a gantry.
##  Min & Max gantry corners - measure from nozzle at MIN (0,0) and 
##  MAX (250, 250), (300,300), or (350,350) depending on your printer size
##  to respective belt positions
[quad_gantry_level]

#--------------------------------------------------------------------

##  Gantry Corners for 350mm Build
##  Uncomment for 350mm build
gantry_corners:
   -60,-10
   410,420
#  Probe points
points:
   50,25
   50,275
   300,275
   300,25

#--------------------------------------------------------------------
speed: 100
horizontal_move_z: 10
retries: 5
#retry_tolerance: 0.0075
retry_tolerance: 0.01
max_adjust: 10

[bed_mesh]
speed: 300
horizontal_move_z: 10
##--------------------------------------------------------------------
##	Uncomment for 350mm build
mesh_min: 40, 40
mesh_max: 310,310
##--------------------------------------------------------------------
fade_start: 0.6
fade_end: 10.0
algorithm: bicubic
#probe_count: 5,5 # Values should be odd, so one point is directly at bed center
#relative_reference_index: 12 # Update when changing probe_count, to ((x points * y points) - 1) / 2. (the center point)
probe_count: 7,7
#relative_reference_index: 24
zero_reference_position: 175, 175

########################################
# EXP1 / EXP2 (display) pins
########################################

[board_pins]
aliases:
    # EXP1 header
    EXP1_1=PE8, EXP1_2=PE7,
    EXP1_3=PE9, EXP1_4=PE10,
    EXP1_5=PE12, EXP1_6=PE13,    # Slot in the socket on this side
    EXP1_7=PE14, EXP1_8=PE15,
    EXP1_9=<GND>, EXP1_10=<5V>,

    # EXP2 header
    EXP2_1=PA6, EXP2_2=PA5,
    EXP2_3=PB1, EXP2_4=PA4,
    EXP2_5=PB2, EXP2_6=PA7,      # Slot in the socket on this side
    EXP2_7=PC15, EXP2_8=<RST>,
    EXP2_9=<GND>, EXP2_10=<5V>

#####################################################################
#   Displays
#####################################################################

[display]
#  mini12864 LCD Display
lcd_type: uc1701
cs_pin: EXP1_3
a0_pin: EXP1_4
rst_pin: EXP1_5
encoder_pins: ^EXP2_5, ^EXP2_3
click_pin: ^!EXP1_2
contrast: 63
spi_software_miso_pin: EXP2_1
spi_software_mosi_pin: EXP2_6
spi_software_sclk_pin: EXP2_2

[neopixel btt_mini12864]
#  To control Neopixel RGB in mini12864 display
pin: EXP1_6
chain_count: 3
initial_RED: 1.0
initial_GREEN: 0.0
initial_BLUE: 0.0
color_order: RGB

[delayed_gcode autostart_stuff]
initial_duration: 1
gcode:
	
	## Start pi fan
	#PI_AUTO_FAN

	## Start Nevermore, if chamber is already hot (means we probably printed ABS and emergency restarted)
	{% if printer["temperature_sensor chamber_temp"].temperature >= 35 %}
	   FILTER_ON
	{% endif %}
	
        ### turn on LEDs for caselight
        SET_PIN PIN=caselight VALUE=0.01

	### play startup sound
	PLAY_SOUND_STARTUP
	
	### run startup LEDS
	LED_MACROS_STARTUP
#--------------------------------------------------------------------


#####################################################################
#   Macros
#####################################################################

[gcode_macro G32]
gcode:
    SAVE_GCODE_STATE NAME=STATE_G32
    G90
    M117 Homing XYZ
    G28
    M117 Calib. Gantry
    QUAD_GANTRY_LEVEL
    M117 Homing again
    G28
    G0 X175 Y175 Z30 F3600
    RESTORE_GCODE_STATE NAME=STATE_G32

[gcode_macro DO_WRITE_TEXT_TO_LCD]
gcode:
    {% set TEXT = params.TEXT|default("TEXT")|string %}
    M117 {TEXT}


[gcode_macro DO_HOME_XY_IF_NOT_ALREADY]
gcode:
    M117 Homing XY
    {% if "x" not in printer.toolhead.homed_axes or "y" not in printer.toolhead.homed_axes %}
    G28 X
    G28 Y
    {% endif %}

[gcode_macro DO_HOME_XYZ_IF_NOT_ALREADY]
gcode:
    M117 Homing XYZ
    {% if "x" not in printer.toolhead.homed_axes or "y" not in printer.toolhead.homed_axes or "z" not in printer.toolhead.homed_axes %}
    #{% if printer.toolhead.homed_axes != 'xyz' %}
    G28
    {% endif %}

[gcode_macro DO_QGL_IF_NOT_ALREADY]
gcode:
    DO_HOME_XYZ_IF_NOT_ALREADY
    M117 Calibrating Gantry
    {% if not printer.quad_gantry_level.applied %}
    QUAD_GANTRY_LEVEL
    M117 Homing Z
    G28 Z
    {% endif %}

#   custom macro for checking if bed mesh is set or running calibrate bed mesh if not
# The way macros work in klipper prevents you from loading a profile and 
# immediately reading the loaded profile_name. So the functions of initially 
# loading it and then checking if the profile could be loaded have to be 
# performed in different macros that both have to be called by a parent macro.
# The reason for this is that printer variable only updates within a macro, 
# after execution of that macro finishes. So calling macro A will load the 
# mesh, state in the parent will still not be updated. But calling macro 
# B from that parent macro will call it with an updated printer variable.
# Current options:
# - profile: Bed mesh profile to use (defaults to "default")
################################################################################
[gcode_macro LOAD_OR_CREATE_MESH]
gcode:
    {% set BED_MESH_PROFILE = params.PROFILE|default("default") %}
    LOAD_PROFILE_MESH PROFILE={ BED_MESH_PROFILE }
    CREATE_PROFILE_MESH PROFILE={ BED_MESH_PROFILE }

[gcode_macro LOAD_PROFILE_MESH]
gcode:
    {% set BED_MESH_PROFILE = params.PROFILE|default("default") %}
    BED_MESH_PROFILE LOAD={ params.PROFILE|default(default) }

[gcode_macro CREATE_PROFILE_MESH]
gcode:
    M117 Calib. Bed Mesh
    {% set BED_MESH_PROFILE = params.PROFILE|default("default") %}
    {% if printer.bed_mesh.profile_name != BED_MESH_PROFILE %}
        BED_MESH_CALIBRATE
        BED_MESH_PROFILE SAVE={ BED_MESH_PROFILE }
    {% endif %}
    LOAD_PROFILE_MESH PROFILE={ BED_MESH_PROFILE }

[gcode_macro DO_HOME_XYZ_QGL_AND_CALIBRATE_BED]
gcode:
    DO_QGL_IF_NOT_ALREADY
    CREATE_PROFILE_MESH

[gcode_macro DO_CALIBRATE_ALL_IF_NOT_ALREADY]
gcode:
    SAVE_GCODE_STATE NAME=STATE_CHECK_HOME_QGL_MESH_CALIB
    DO_HOME_XYZ_QGL_AND_CALIBRATE_BED
    G90
    G0 X175 Y175 Z30 F3600
    RESTORE_GCODE_STATE NAME=STATE_CHECK_HOME_QGL_MESH_CALIB
    

#   custom nozzle priming/purge
#[gcode_macro DO_PURGE_LINE]
#gcode:
#    M117 Purging
#    SAVE_GCODE_STATE NAME=PRIME_NOZZLE_STATE 
#    G90 ; Absolute coordinates. 
#    M83 ; Relative extruder mode. 
#    G92 E0 ; Move to start of line. 
#    G1 Z10 F900 
#    G1 Y3 X3 F10000 ; goto front left corner of the bed, doiesn'æt matter if it's 200, 300 or 350.
#    G1 Z0.25 F900 ; Print the line. 0.25mm layer height
#    G91 ; Relative coordinates. 
#    G1 X100 E25 F800 ; Extrude filament 25mm (how much it retracted in PRINT_END). 
#    G1 Y-2 F1000 
#    G1 X-60 E9 F800 ; Print second part of the line. 
#    G1 E-0.5 F3000 ; Retract to avoid stringing. 
#    G1 X0.5 E0 F800 ; Wipe back to break string. 
#    G1 X-5.5 E0 F800 ; Wipe forward to break string.
#    G1 Z5 F900 ; move hotend up a little, just to be safe.
#    G1 E0.5 F1000 ; Extrude back our to zero, ready to print
#    RESTORE_GCODE_STATE NAME=PRIME_NOZZLE_STATE ; restore state, then start printing after this

[gcode_macro DO_PURGE_BUCKET_AND_SCRUB]
gcode:
    DO_HOME_XYZ_IF_NOT_ALREADY
    M117 Purging
    #M400
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
    #{% if printer.extruder.temperature <= 245 %}
    {% if printer.extruder.temperature <= EXTRUDER_TEMP %}
      M109 S245 ### default minimum purge bucket temperature is 240 degC, setting temp to 245 for purge, PLA should probably have less than this.
    {% endif %}
    clean_nozzle
    M109 S{EXTRUDER_TEMP}


[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    {% set BASE = params.BASE|default(0)|int %}                                          # run BASE_PAUSE only

    {% set z = params.Z|default(10)|int %}                                                   # z hop amount

    {% if BASE == 1 %}
       BASE_PAUSE
    {% else %}
       {% if printer['pause_resume'].is_paused|int == 0 %}
    	    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              # set z hop variable for reference in resume macro
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    # set hotend temp variable for reference in resume macro

	    DISABLE_FILAMENT_SENSORS
	    SAVE_GCODE_STATE NAME=PAUSE                                                          # save current print position for resume
	    BASE_PAUSE                                                                           # pause print
	    {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       # check that zhop doesnt exceed z max
	       G91                                                                              # relative positioning
	       G1 Z{z} F900                                                                     # raise Z up by z hop amount
	    {% else %}
	       { action_respond_info("Pause zhop exceeds maximum Z height.") }                  # if z max is exceeded, show message and set zhop value for resume to 0
	       SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
	    {% endif %}
	    G90                                                                                  # absolute positioning
	    G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000   # park toolhead at front center
	    SAVE_GCODE_STATE NAME=PAUSEPARK                                                      # save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
	    M104 S0                                                                              # turn off hotend
	    SET_IDLE_TIMEOUT TIMEOUT=25200                                                       # set timeout to 7 hours
	{% endif %}
    {% endif %}

[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    {% set BASE = params.BASE|default(0)|int %}                                          # run BASE_RESUME only
    {% set e = params.E|default(2.5)|int %}                                          # hotend prime amount (in mm)

    {% if BASE == 1 %}
       BASE_RESUME
    {% else %}
       {% if printer['pause_resume'].is_paused|int == 1 %}
	  ENABLE_FILAMENT_SENSORS
	  #INITIAL_RGB                                                                    # reset LCD color
	  LED_MACROS_PRINTING
	  SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  # set timeout back to configured value
	  {% if etemp > 0 %}
	      M109 S{etemp|int}                                                        # wait for hotend to heat back up
	  {% endif %}
	  RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     # go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)
	  G91                                                                          # relative positioning
	  M83                                                                          # relative extruder positioning
	  {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
	  G1 Z{zhop * -1} E{e} F900                                                # prime nozzle by E, lower Z back down
	  {% else %}
	  G1 Z{zhop * -1} F900                                                     # lower Z back down without priming (just in case we are testing the macro with cold hotend)
	  {% endif %}
	  RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          # restore position
	  BASE_RESUME                                                          	       # resume print
       {% endif %}
    {% endif %}

## add interruptable cancel print
# [gcode_macro CANCEL_PRINT]
# rename_existing: BASE_CANCEL_PRINT
# gcode:
#     INTERRUPTABLE_PRINT_START_CANCEL
#     BASE_CANCEL_PRINT
### add ellis cancel print, add interruptable cancel print to it
[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    INTERRUPTABLE_PRINT_START_CANCEL
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} ; set timeout back to configured value
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    PRINT_END
    BASE_CANCEL_PRINT


[gcode_macro INTERRUPTABLE_PRINT_START]
gcode:
    ## pause if printing just started, or we're not not already paused
    # {% set is_print_active = printer['virtual_sdcard'].is_active or printer['virtual_sdcard'].file_position != 0.0 %}
    # {% if is_print_active or printer['pause_resume'].is_paused|int == 0 %} 
    #    PAUSE 
    # {% endif %}



    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
    {% set CHAMBER_TEMP = params.CHAMBER_TEMP|default(0)|float %}
    {% set PROBE_TEMPERATURE = params.PROBE_TEMPERATURE|default(145.0)|float %}

    { action_respond_info( "INTERRUPTABLE_PRINT_START: EXTRUDER_TEMP=%s" % ( EXTRUDER_TEMP | float ) ) }
    { action_respond_info( "INTERRUPTABLE_PRINT_START: BED_TEMP=%s" % ( BED_TEMP | float ) )   }
    { action_respond_info( "INTERRUPTABLE_PRINT_START: CHAMBER_TEMP=%s" % ( CHAMBER_TEMP | float ) ) }

    CLEAR_PAUSE

    M117 IntruptblStart
    PLAY_SOUND_PRE_PRINT
    VEFACH_ON S={CHAMBER_TEMP}
    DO_HOME_XY_IF_NOT_ALREADY

    ## start interruptable prepare4print macro
    { action_respond_info( "INTERRUPTABLE_PRINT_START: DEBUG1"  )   }
    {% set PROBE_TEMPERATURE = 145.0 | float %}
    { action_respond_info( "INTERRUPTABLE_PRINT_START: probe=%s" % ( PROBE_TEMPERATURE | float ) ) }
    INTERRUPTABLE_PRINT_START_MAIN DEBUG=0 STAGE1_DURATION=1200 STAGE1_BED_TEMPERATURE={BED_TEMP} STAGE2_DURATION=3600 STAGE2_CHAMBER_TEMPERATURE={CHAMBER_TEMP} STAGE3_DURATION=180 STAGE3_HOTEND_TEMPERATURE={PROBE_TEMPERATURE} FINISHED_BED_TEMPERATURE={BED_TEMP} FINISHED_CHAMBER_TEMPERATURE={CHAMBER_TEMP} FINISHED_HOTEND_TEMPERATURE={EXTRUDER_TEMP}
    { action_respond_info( "INTERRUPTABLE_PRINT_START: DEBUG2"  )   }


#   Use PRINT_START for the slicer starting script - please customise for your slicer of choice
[gcode_macro PRINT_START]
gcode:

    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
    {% set CHAMBER_TEMP = params.CHAMBER_TEMP|default(0)|float %}

    { action_respond_info( "PRINT_START: hotend=%s" % ( EXTRUDER_TEMP | float ) )   }
    { action_respond_info( "PRINT_START: bed=%s" % ( BED_TEMP | float ) )   }
    { action_respond_info( "PRINT_START: chamber=%s" % ( CHAMBER_TEMP | float ) )   }

    #CLEAR_PAUSE
    M117 PRINT_START

    ## start normal print prep
    ## set heaters
    LED_MACROS_PRE_PRINT1
    M117 Heating Bed
    M140 S{BED_TEMP}
    M190 S{BED_TEMP} ## wait for bed temp
    
    LED_MACROS_PRE_PRINT2
    M141 S{CHAMBER_TEMP} ## wait for chamber temp
    
    M117 Heat2ProbeTemp
    LED_MACROS_PRE_PRINT3
    M109 S145 ## heat nozzle to tap probe temp


    LED_MACROS_PRE_PRINT4
    ## home and calibrate
    DO_HOME_XYZ_IF_NOT_ALREADY
    FILTER_OFF ### turn off filter to not throw off probing samples
    DO_QGL_IF_NOT_ALREADY
    M117 Calib. Bed Mesh
    BED_MESH_CLEAR
    BED_MESH_CALIBRATE
    {% if CHAMBER_TEMP > 0.0 %} # don't use filter or wait if temp != 0.0
       FILTER_ON ### enable filter again if chambertemp is set to warm (likely using filament that offgases)
    {% endif %}
    G90                            ; absolute positioning
    #G1 Z20 F3000                   ; move nozzle away from bed
    M117 Heating Hotend
    M109 S{EXTRUDER_TEMP}

    G92 E0 ## reset extruder
    ## purge and scrub and purgeline
    DO_PURGE_BUCKET_AND_SCRUB EXTRUDER_TEMP={EXTRUDER_TEMP}
    Smart_Park

    G92 E0 ## reset extruder
    # VORON_PURGE # KAMP voron logo purge. not using this due to problems with exceeding maximum extrusion volume. (can be overridden by setting [extruder] -> max_extrude_cross_section: 5 )
    LINE_PURGE # KAMP line purge
    
    G1 E.50 F2100 # prime nozzle

    M117 Printing
    G90 ## making doubly sure we are starting with absolute coordinates and not relative.

    ENABLE_FILAMENT_SENSORS
    
    # start printing leds progressbar leds
    #LED_MACROS_PROGRESS_BAR
    #LED_MACROS_HEADLIGHT
    LED_MACROS_PRINTING
    PLAY_SOUND_PRINT_START




    ## resume print (because INTERRUPTABLE_PRINT_START pauses it to do it's thing)
    {% if printer['pause_resume'].is_paused|int == 1 %}
       RESUME
    {% endif %}



### add a redirect to PRINT_START in case of incorrectly named START_PRINT macros from slicers
[gcode_macro START_PRINT]
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
    {% set CHAMBER_TEMP = params.CHAMBER_TEMP|default(0)|float %}
    PRINT_START BED_TEMP={BED_TEMP} EXTRUDER_TEMP={EXTRUDER_TEMP} CHAMBER_TEMP={CHAMBER_TEMP}



#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
[gcode_macro PRINT_END]
gcode:
    M117 Print Done
    LED_MACROS_PRINT_COMPLETE
    VEFACH_ON S=1
    BED_FAN_OFF
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-5.0 F1800                 ; retract filament
    
    TURN_OFF_HEATERS
    
    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
    M107                                     ; turn off fan

    DISABLE_FILAMENT_SENSORS

    #BED_MESH_CLEAR
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
    PLAY_SOUND_PRINT_END
    M117



## other custom macros


### Filament change or stop at height macros
#### filament change
#[gcode_macro M600]
# gcode:
#     M400
#     PAUSE
# default_parameter_X: 30 ;purge buccket location
# default_parameter_Y: 307 ;purge buccket location
# #default_parameter_Z: 2.5 ;purge buccket location
# gcode:
#     {% set X = params.X|default(30)|int %}
#     {% set Y = params.Y|default(307)|int %}
#     {% set Z = params.Z|default(2.5)|int %}
#     M400
#     SAVE_GCODE_STATE NAME=M600
#     PAUSE
#     G91
#     G1 Z20 F900 ;Raise Z away from print
#     G90
#     G1 X{X} Y{Y} F18000 ;Move to purge bucket
#     SAVE_GCODE_STATE NAME=FIRSTMOVE
#     G1 Z{Z} F18000 ;Move to purge bucket
#     G91
#     G1 E-120 F1000 ;Unload filament
#     RESTORE_GCODE_STATE NAME=M600
[gcode_macro M600]
gcode:
    {% set X = params.X|default(345)|float %}
    {% set Y = params.Y|default(30)|float %}
    {% set Z = params.Z|default(50)|float %}

    PAUSE  # pause print


    ### Bring extruder to front and autoretract with tip shaping, if there's enough Z-height remaining.

    SAVE_GCODE_STATE NAME=M600
    G91 #relative coordinates
    {% if printer.extruder.can_extrude|lower == 'true' %} # check for minimum extrusion temperature
      G1 E-.8 F2700 # retract
    {% endif %}
    {% if printer.extruder.can_extrude|lower != 'true' %} # check for minimum extrusion temperature
      M117 Hotend Heating!
      #M109 S235 T0 # set temperature and wait, 235 is a good temp for most filaments
      M109 S235 # set temperature and wait, 235 is a good temp for most filaments
    {% endif %}
    {% if (printer.gcode_move.position.z + Z) < printer.toolhead.axis_maximum.z %}
        G1 Z{Z} # move printhead up
	G90 # absolute coordinates
	G1 X{X} Y{Y} F3000 # move gantry to position
	G91 # relative coordinates
	{% if printer.extruder.can_extrude|lower != 'true' %} # check for minimum extrusion temperature
	M117 Hotend Heating!
	M109 S235 T0 # set temperature and wait, 235 is a good temp for most filaments
	{% endif %}
	#G1 E-50 F1000 # retract filament
	G1 E5 F3000 # fast extrude
	G1 E-30 F3600 # fast retract filament to cold end (center of revo cold end is ~30mm back)
	M400
	G4 P3000 # wait three seconds for hot filament to cool at the cold end
	G1 E-50 F300 # slow retract, unload filament
	M400
	G1 E-50 F300 # slow retract, unload filament
	M400
	M104 S0 T0
    {% else %}
        { action_respond_info("ERROR: M600: Pause zhop exceeds maximum Z height. Take Manual Control and SWAP FILAMENT, then resume.") }              # if z max is exceeded, show message and set zhop value for resume to 0
	M117 "M600:ErrMnlSwp"
    {% endif %}
    M117 Change Filament!
    RESTORE_GCODE_STATE NAME=M600

[gcode_macro M141]
gcode:
    M117 W8 4 ChamberTemp
    {% set S = params.S|default(0)|float %}
    { action_respond_info('Chamber Temperature set to: %.1fC' % (S)) }
    {% if S > 0.0 %} # don't use filter or wait if temp != 0.0
      { action_respond_info('Waiting for a chamber temperature of: %.1fC' % (S)) }
      FILTER_ON_100
      BED_FAN_ON S={S}
      VEFACH_ON S={S}
      
      TEMPERATURE_WAIT SENSOR="temperature_sensor chamber_temp" MINIMUM={S}
      FILTER_ON_100
    {% else %}
      VEFACH_ON S=30  ### enable exhaust fan even when chamber temp is set to 0, to exhaust/filter even petg and pla hazardous elements.
      #{ action_respond_info('Chamber temperature reached!') }
    {% endif %}
    

#### M0 = Pause (at height)
[gcode_macro M0]
gcode:
    M400
    PAUSE
#### M1 = Pause (at height)
[gcode_macro M1]
gcode:
    M400
    PAUSE

[gcode_arcs]
#resolution: 1.0
#   An arc will be split into segments. Each segment's length will
#   equal the resolution in mm set above. Lower values will produce a
#   finer arc, but also more work for your machine. Arcs smaller than
#   the configured value will become straight lines. The default is
#   1mm.

[include mainsail.cfg]

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [probe]
#*# z_offset = -0.405
#*#
#*# [extruder]
#*# control = pid
#*# pid_kp = 27.885
#*# pid_ki = 2.295
#*# pid_kd = 84.700
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# 	  0.003546, 0.001046, 0.006046
#*# 	  -0.001454, 0.004796, 0.012296
#*# 	  0.044796, 0.029796, 0.033546
#*# x_count = 3
#*# y_count = 3
#*# mesh_x_pps = 2
#*# mesh_y_pps = 2
#*# algo = lagrange
#*# tension = 0.2
#*# min_x = 159.18
#*# max_x = 218.64
#*# min_y = 151.7
#*# max_y = 206.8
#*#
#*# [input_shaper]
#*# shaper_type_x = mzv
#*# shaper_freq_x = 60.6
#*# shaper_type_y = mzv
#*# shaper_freq_y = 43.6
